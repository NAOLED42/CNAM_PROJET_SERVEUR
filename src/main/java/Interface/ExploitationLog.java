package Interface;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.GridLayout;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.border.Border;
import javax.swing.border.EmptyBorder;
import javax.swing.border.EtchedBorder;
import javax.swing.border.TitledBorder;

import Model.dao.DAOException;
import Model.dao.DAOFactory;
import Model.dao.DefaultDAOCanal;
import Model.dao.DefaultDAOMessage;
import Model.dao.DefaultDAOUser;
import Model.dao.bean.Canal;
import Model.dao.bean.Message;
import Model.dao.bean.User;

public class ExploitationLog extends JFrame implements ActionListener {

	private static final long serialVersionUID = 1L;

	final JPanel panelSearchBar = new JPanel();
	final JPanel panelMessage = new JPanel();
	final JPanel contentSearch = new JPanel();
	final JLabel titleText = new JLabel("Consultation des messages postÃ©s");
	final JTextField searchTextArea = new JTextField();
	final JLabel labelSearch = new JLabel("Search");
	final JPanel panelButton = new JPanel();
	final JButton userButton = new JButton("Utilisateurs");
	final JButton canalButton = new JButton("Canaux");
	final JPanel panelComboBoxCanal = new JPanel();
	final JPanel panelComboBoxUser = new JPanel();
	final JPanel contentCombo = new JPanel();

	final JComboBox listCanal = new JComboBox();
	final JComboBox listUser = new JComboBox();

	final JPanel informationPanel = new JPanel();
	final JPanel content = new JPanel();
	final JTextArea informationTextArea = new JTextArea(">> Informations \n");

	boolean userActive = true;
	boolean canalActive = false;

	public ExploitationLog() {
		super("T'Chat IRC (v0.1 alpha) - Exploitation des logs");
		// Creation of the window
		final Container content = getContentPane();
		content.setPreferredSize(new Dimension(800, 600));
		content.setLayout(new GridLayout(4, 1));
		// Adding all panels to the main pane.
		content.add(getSearchbar());
		content.add(getButton());
		content.add(getComboBox());
		content.add(getInformation());
		this.setSize(800, 600);
		this.setResizable(false);
		this.setLocation(800, 0);
		setVisible(true);

	}

	// Function that returns the first pannel for label and searchbar
	private JPanel getSearchbar() {

		panelSearchBar.setLayout(new GridLayout(0, 2));
		panelMessage.setLayout(new GridLayout(0, 1));

		panelSearchBar.setBorder(BorderFactory.createEmptyBorder(50, 0, 50, 150));
		searchTextArea.setColumns(10);

		panelSearchBar.add(labelSearch);
		panelMessage.add(titleText);
		panelSearchBar.add(searchTextArea);

		contentSearch.setLayout(new BorderLayout());
		contentSearch.setBorder(new EmptyBorder(0, 50, 0, 50));
		contentSearch.add(panelMessage, BorderLayout.WEST);
		contentSearch.add(panelSearchBar, BorderLayout.EAST);

		return contentSearch;
	}

	// Function that returns the buttons
	private JPanel getButton() {

		panelButton.setLayout(new FlowLayout());

		userButton.setPreferredSize(new Dimension(300, 30));
		canalButton.setPreferredSize(new Dimension(300, 30));

		userButton.setActionCommand("activeUser");
		canalButton.setActionCommand("activeCanal");
		userButton.addActionListener(this);
		canalButton.addActionListener(this);

		panelButton.add(userButton);
		panelButton.add(canalButton);

		return panelButton;

	}

	private JPanel getComboBox() {

		panelComboBoxCanal.setLayout(new GridLayout(0, 1));
		panelComboBoxUser.setLayout(new GridLayout(0, 1));

		panelComboBoxUser.add(listUser);
		panelComboBoxUser.add(listCanal);

		Connection c = null;

		// populate the combobox with data from database :
		try {
			c = DAOFactory.getConnection();
			DefaultDAOCanal canalDAO = DAOFactory.getDAOCanal(c);
			DefaultDAOUser userDAO = DAOFactory.getDAOUser(c);

			List<Canal> list = canalDAO.list();
			List<User> listuser = userDAO.list();

			for (Canal n : canalDAO.list()) {
				listCanal.addItem(n.getNom().toString());
			}

			for (User u : listuser) {
				listUser.addItem(u.getLogin().toString());
			}
		} catch (DAOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		listCanal.setActionCommand("comboBoxCanal");
		listCanal.addActionListener(this);
		
		listUser.setActionCommand("comboBoxUser");
		listUser.addActionListener(this);
		
		listCanal.setEditable(false);
		listUser.setEditable(false);

		contentCombo.setLayout(new BorderLayout());

		contentCombo.add(panelComboBoxCanal, BorderLayout.EAST);
		contentCombo.add(panelComboBoxUser, BorderLayout.WEST);
		contentCombo.setBorder(new EmptyBorder(50, 220, 50, 220));

		return contentCombo;

	}

	private JPanel getInformation() {

		informationPanel.setLayout(new BorderLayout());

		informationTextArea.setEditable(false);
		informationTextArea.setBorder(new TitledBorder(new EtchedBorder(), "Derniers messages"));

		informationPanel.add(informationTextArea, BorderLayout.CENTER);
		informationPanel.setBorder(new EmptyBorder(20, 20, 20, 20));
		content.setLayout(new BorderLayout());
		content.add(informationPanel);

		return content;

	}

	@Override
	public void actionPerformed(ActionEvent e) {
		String action = e.getActionCommand();
		informationTextArea.setText(null);
		if (action.equals("activeUser")) {
			userButton.setBackground(new Color(140, 219, 89));
			canalButton.setBackground(new Color(196, 196, 196));
			canalButton.setEnabled(true);
			canalButton.setFocusable(false);
			listCanal.setFocusable(false);
			listCanal.setEnabled(false);
			listUser.setEnabled(true);

		} else if (action.equals("activeCanal")) {
			canalButton.setBackground(new Color(140, 219, 89));
			canalButton.setEnabled(true);
			canalButton.setFocusable(true);
			userButton.setBackground(new Color(196, 196, 196));
			userButton.setEnabled(true);
			userButton.setFocusable(false);
			listUser.setFocusable(false);
			listUser.setEnabled(false);
			listCanal.setEnabled(true);

		}
		
		if (action.equals("comboBoxCanal")) {
			Connection c = null;

			try {
				c = DAOFactory.getConnection();
				DefaultDAOMessage message = DAOFactory.getDAOMessage(c);
				System.out.println(listCanal.getSelectedItem().toString());
				List<Message> listMessageCanal = message.getMessageByCanalNom(listCanal.getSelectedItem().toString());

				for (Message n : listMessageCanal) {
					informationTextArea.append(n.getMessage().toString() + "\n");
				}
			} catch (DAOException error) {
				// TODO Auto-generated catch block
				error.printStackTrace();
			}
		}
		
		if (action.equals("comboBoxUser")) {
			System.out.println("toto");
			Connection c = null;

			try {
				c = DAOFactory.getConnection();
				DefaultDAOMessage message = DAOFactory.getDAOMessage(c);
				
				DefaultDAOUser user = DAOFactory.getDAOUser(c);
				
				User u = user.getUserFromLogin(listUser.getSelectedItem().toString());

				List<Message> listMessageUser = message.getMessageByUser(u.getId());

				for (Message n : listMessageUser) {
					informationTextArea.append("[ " + n.getDateEnvoie() + " ] : ");
					informationTextArea.append(n.getMessage().toString() + "\n");
					System.out.println(n.getMessage().toString());
				}
			} catch (DAOException error) {
				// TODO Auto-generated catch block
				error.printStackTrace();
			}
			listCanal.getSelectedItem().toString();
		}
	}
}
